@function randomNum($min, $max) {
  $rand: random();
  $randomNum: $min + floor($rand * (($max - $min) + 1));

  @return $randomNum;
}

@mixin masonry($columns: 3, $gap: 2%, $selector: '> *') {

  @if unit($gap) == "rem" {
    $gap: strip-units($gap) * 16px;
  }
  $gapunit: unit($gap);

  // Fallback to inline-blocks and text-align: justify
  $box-width: 100 / $columns * 1%;
  $box-width-perc: (100 - (($columns - 1) * $gap)) / $columns;
  $box-subract: rem( $gap/ ($columns / ($columns - 1)));

  text-align: justify;
  font-size: 0;

  &:after {
    content: '';
    display: inline-block;
    width: 100%;
  }

  & #{$selector} {

    //@include box-sizing(border-box);

    

    vertical-align: top;
    display: inline-block;

    @if $gapunit == '%' {
      width: $box-width-perc;
    } @else {
      width: calc(#{$box-width} - #{$box-subract});
    }
  }

  // Masonry
  $margins: $gap / 2 * -1;
  $paddings: ($columns * ($gap/2)) / ((100 + strip-units($gap)) / 100);

  
}

/************************************************************************
 Borrowed from Bourbon: http://bourbon.io/docs/#html5-input-types

 Generate a variable ($all-text-inputs) with a list of all html5 input types that have a text-based input, excluding textarea.
 http://diveintohtml5.org/forms.html
************************************************************************/
@function assign-inputs($inputs, $pseudo: null) {
  $list : ();

  @each $input in $inputs {
    $input: unquote($input);
    $input: if($pseudo, $input + ":" + $pseudo, $input);
    $list: append($list, $input, comma);
  }

  @return $list;
}

$inputs-list: 'input[type="email"]',
              'input[type="number"]',
              'input[type="password"]',
              'input[type="search"]',
              'input[type="tel"]',
              'input[type="text"]',
              'input[type="url"]',

              /* Webkit & Gecko may change the display of these in the future */
              'input[type="color"]',
              'input[type="date"]',
              'input[type="datetime"]',
              'input[type="datetime-local"]',
              'input[type="month"]',
              'input[type="time"]',
              'input[type="week"]';

/* Bare inputs */
$all-text-inputs: assign-inputs($inputs-list);

/* Hover Pseudo-class */
$all-text-inputs-hover: assign-inputs($inputs-list, hover);

/* Focus Pseudo-class */
$all-text-inputs-focus: assign-inputs($inputs-list, focus);


@mixin gradient($start, $end){
  background: -moz-linear-gradient(top, $start 0%, $end 100%); /* FF3.6-15 */
  background: -webkit-linear-gradient(top, $start 0%, $end 100%); /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(to bottom, $start 0%, $end 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#ffffff',GradientType=0 ); /* IE6-9 */
}

@mixin _placeholder {
  &::-webkit-input-placeholder {@content}
  &:-moz-placeholder           {@content}
  &::-moz-placeholder          {@content}
  &:-ms-input-placeholder      {@content}  
}

@mixin scrollbars($size, $foreground-color, $background-color) {
  // For Google Chrome
  &::-webkit-scrollbar {
    width:  $size;
    height: $size;
  }

  &::-webkit-scrollbar-thumb {
    background: $foreground-color;
  }

  &::-webkit-scrollbar-track {
    background: $background-color;
  }

  // For Internet Explorer
  & {
    scrollbar-face-color: $foreground-color;
    scrollbar-track-color: $background-color;
  }
}

@mixin underliner($color:black, $height:1, $bottom:0){
  &{
    display: block;
    position: relative;
  }
  &:after{
    @include anime();
    content: '';
    display: block;
    height: $height;
    width: 0;
    background: $color;
    position: absolute;
    bottom: $bottom;
  }
  &:hover:after,
  &.active:after{
    width: 100%;
  }
}

// Burger parts
//
// (---) top    -> &::before
// [---] middle -> &
// (---) bottom -> &::after


// Vendor prefixes
$sass-burger-add-vendor-prefixes: true !default;

// Burger
@mixin burger($width: 30px, $height: 5px, $gutter: 3px, $color: #000, $border-radius: 0, $transition-duration: .3s) {
    $burger-height: $height !global;
    $burger-gutter: $gutter !global;

    //position: relative;
    //margin-top: $height + $gutter;
    //margin-bottom: $height + $gutter;

    @if $sass-burger-add-vendor-prefixes {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
    }
    user-select: none;

    // 1. Fixes jagged edges in Firefox, see issue #10.
    &, &::before, &::after {
        display: block;
        width: $width;
        height: $height;
        background-color: $color;
        outline: 1px solid transparent; // 1
        @if $border-radius != 0 {
            border-radius: $border-radius;
        }

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-property: background-color, -webkit-transform;
            -moz-transition-property: background-color, -moz-transform;
            -o-transition-property: background-color, -o-transform;
        }
        transition-property: background-color, transform;

        @if $sass-burger-add-vendor-prefixes {
            -webkit-transition-duration: $transition-duration;
            -moz-transition-duration: $transition-duration;
            -o-transition-duration: $transition-duration;
        }
        transition-duration: $transition-duration;
    }

    &::before, &::after {
        position: absolute;
        content: "";
    }

    &::before {
        top: -($height + $gutter);
    }

    &::after {
        top: $height + $gutter;
    }
}


// Select parts of the burger
@mixin burger-parts {
    &, &::before, &::after {
        @content;
    }
}

@mixin burger-top {
    &::before {
        @content;
    }
}

@mixin burger-middle {
    & {
        @content;
    }
}

@mixin burger-bottom {
    &::after {
        @content;
    }
}


// Burger animations
@mixin burger-to-cross($color: auto) {
    & {
        background-color: transparent;
    }
    @if ($color != auto) {
        &::before, &::after {
            background-color: $color;
        }
    }
    &::before {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -moz-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -ms-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
            -o-transform: translateY($burger-gutter + $burger-height) rotate(45deg);
        }
        transform: translateY($burger-gutter + $burger-height) rotate(45deg);
    }
    &::after {
        @if $sass-burger-add-vendor-prefixes {
            -webkit-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -moz-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -ms-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
            -o-transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
        }
        transform: translateY(-($burger-gutter + $burger-height)) rotate(-45deg);
    }
}